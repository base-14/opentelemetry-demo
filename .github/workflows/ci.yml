name: CI - Lint and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.2'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DOTNET_VERSION: '8.0'
  JAVA_VERSION: '21'
  RUST_VERSION: 'stable'
  PHP_VERSION: '8.1'
  RUBY_VERSION: '3.2'

jobs:
  # Detect which services have changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      accounting: ${{ steps.changes.outputs.accounting }}
      ad: ${{ steps.changes.outputs.ad }}
      cart: ${{ steps.changes.outputs.cart }}
      checkout: ${{ steps.changes.outputs.checkout }}
      currency: ${{ steps.changes.outputs.currency }}
      email: ${{ steps.changes.outputs.email }}
      flagd-ui: ${{ steps.changes.outputs.flagd-ui }}
      fraud-detection: ${{ steps.changes.outputs.fraud-detection }}
      frontend: ${{ steps.changes.outputs.frontend }}
      load-generator: ${{ steps.changes.outputs.load-generator }}
      payment: ${{ steps.changes.outputs.payment }}
      product-catalog: ${{ steps.changes.outputs.product-catalog }}
      quote: ${{ steps.changes.outputs.quote }}
      recommendation: ${{ steps.changes.outputs.recommendation }}
      shipping: ${{ steps.changes.outputs.shipping }}
      react-native-app: ${{ steps.changes.outputs.react-native-app }}
      helm-chart: ${{ steps.changes.outputs.helm-chart }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            accounting:
              - 'src/accounting/**'
            ad:
              - 'src/ad/**'
            cart:
              - 'src/cart/**'
            checkout:
              - 'src/checkout/**'
            currency:
              - 'src/currency/**'
            email:
              - 'src/email/**'
            flagd-ui:
              - 'src/flagd-ui/**'
            fraud-detection:
              - 'src/fraud-detection/**'
            frontend:
              - 'src/frontend/**'
            load-generator:
              - 'src/load-generator/**'
            payment:
              - 'src/payment/**'
            product-catalog:
              - 'src/product-catalog/**'
            quote:
              - 'src/quote/**'
            recommendation:
              - 'src/recommendation/**'
            shipping:
              - 'src/shipping/**'
            react-native-app:
              - 'src/react-native-app/**'
            helm-chart:
              - 'helm-chart/**'

  # .NET services (C#)
  dotnet-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.accounting == 'true' || needs.detect-changes.outputs.cart == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [accounting, cart]
        include:
          - service: accounting
            path: src/accounting
            has-tests: false
          - service: cart
            path: src/cart
            has-tests: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        if: (matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true')
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        if: (matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true')
        working-directory: ${{ matrix.path }}
        run: dotnet restore

      - name: Build
        if: (matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true')
        working-directory: ${{ matrix.path }}
        run: dotnet build --no-restore --configuration Release

      - name: Lint with dotnet format
        if: (matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true')
        working-directory: ${{ matrix.path }}
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Run tests
        if: matrix.has-tests && ((matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true'))
        working-directory: ${{ matrix.path }}
        run: dotnet test --no-build --configuration Release --logger trx --results-directory TestResults/

      - name: Upload test results
        if: matrix.has-tests && always() && ((matrix.service == 'accounting' && needs.detect-changes.outputs.accounting == 'true') || (matrix.service == 'cart' && needs.detect-changes.outputs.cart == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: ${{ matrix.path }}/TestResults/

  # Java services
  java-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.ad == 'true' || needs.detect-changes.outputs.fraud-detection == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ad, fraud-detection]
        include:
          - service: ad
            path: src/ad
          - service: fraud-detection
            path: src/fraud-detection
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        if: (matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true')
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        if: (matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true')
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        if: (matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true')
        working-directory: ${{ matrix.path }}
        run: ./gradlew build

      - name: Lint with Spotless
        if: (matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true')
        working-directory: ${{ matrix.path }}
        run: ./gradlew spotlessCheck

      - name: Run tests
        if: (matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true')
        working-directory: ${{ matrix.path }}
        run: ./gradlew test

      - name: Upload test results
        if: always() && ((matrix.service == 'ad' && needs.detect-changes.outputs.ad == 'true') || (matrix.service == 'fraud-detection' && needs.detect-changes.outputs.fraud-detection == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: ${{ matrix.path }}/build/test-results/

  # Go services
  go-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.checkout == 'true' || needs.detect-changes.outputs.product-catalog == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [checkout, product-catalog]
        include:
          - service: checkout
            path: src/checkout
          - service: product-catalog
            path: src/product-catalog
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        working-directory: ${{ matrix.path }}
        run: go mod download

      - name: Build
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        working-directory: ${{ matrix.path }}
        run: go build -v ./...

      - name: Lint with golangci-lint
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ${{ matrix.path }}

      - name: Run tests
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        working-directory: ${{ matrix.path }}
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        if: (matrix.service == 'checkout' && needs.detect-changes.outputs.checkout == 'true') || (matrix.service == 'product-catalog' && needs.detect-changes.outputs.product-catalog == 'true')
        uses: codecov/codecov-action@v4
        with:
          file: ${{ matrix.path }}/coverage.out
          flags: ${{ matrix.service }}

  # Node.js services
  nodejs-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.payment == 'true' || needs.detect-changes.outputs.flagd-ui == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, payment, flagd-ui]
        include:
          - service: frontend
            path: src/frontend
          - service: payment
            path: src/payment
          - service: flagd-ui
            path: src/flagd-ui
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'payment' && needs.detect-changes.outputs.payment == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json

      - name: Install dependencies
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'payment' && needs.detect-changes.outputs.payment == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        working-directory: ${{ matrix.path }}
        run: npm ci

      - name: Lint
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'payment' && needs.detect-changes.outputs.payment == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No lint script found, skipping"
          fi

      - name: Type check (TypeScript)
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          fi

      - name: Build
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          if grep -q '"build"' package.json; then
            npm run build
          else
            echo "No build script found, skipping"
          fi

      - name: Run tests
        if: (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend == 'true') || (matrix.service == 'payment' && needs.detect-changes.outputs.payment == 'true') || (matrix.service == 'flagd-ui' && needs.detect-changes.outputs.flagd-ui == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, skipping"
          fi

  # Python services
  python-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.recommendation == 'true' || needs.detect-changes.outputs.load-generator == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [recommendation, load-generator]
        include:
          - service: recommendation
            path: src/recommendation
          - service: load-generator
            path: src/load-generator
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: (matrix.service == 'recommendation' && needs.detect-changes.outputs.recommendation == 'true') || (matrix.service == 'load-generator' && needs.detect-changes.outputs.load-generator == 'true')
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: (matrix.service == 'recommendation' && needs.detect-changes.outputs.recommendation == 'true') || (matrix.service == 'load-generator' && needs.detect-changes.outputs.load-generator == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flake8 black pytest pytest-cov

      - name: Lint with flake8
        if: (matrix.service == 'recommendation' && needs.detect-changes.outputs.recommendation == 'true') || (matrix.service == 'load-generator' && needs.detect-changes.outputs.load-generator == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        if: (matrix.service == 'recommendation' && needs.detect-changes.outputs.recommendation == 'true') || (matrix.service == 'load-generator' && needs.detect-changes.outputs.load-generator == 'true')
        working-directory: ${{ matrix.path }}
        run: black --check .

      - name: Run tests with pytest
        if: (matrix.service == 'recommendation' && needs.detect-changes.outputs.recommendation == 'true') || (matrix.service == 'load-generator' && needs.detect-changes.outputs.load-generator == 'true')
        working-directory: ${{ matrix.path }}
        run: |
          if [ -d "tests" ] || find . -name "*test*.py" -not -path "./venv/*" | grep -q .; then
            pytest --cov=. --cov-report=xml
          else
            echo "No tests found, skipping"
          fi

  # PHP service
  php-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.quote == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl
          tools: composer:v2

      - name: Install dependencies
        working-directory: src/quote
        run: composer install --prefer-dist --no-progress

      - name: Lint with PHP CS Fixer
        working-directory: src/quote
        run: |
          composer require --dev friendsofphp/php-cs-fixer
          vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run PHPStan
        working-directory: src/quote
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse src --level=1

      - name: Run tests
        working-directory: src/quote
        run: |
          if [ -d "tests" ]; then
            composer require --dev phpunit/phpunit
            vendor/bin/phpunit
          else
            echo "No tests found, skipping"
          fi

  # Ruby service
  ruby-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.email == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          working-directory: src/email
          bundler-cache: true

      - name: Lint with RuboCop
        working-directory: src/email
        run: |
          gem install rubocop
          rubocop --format progress --display-cop-names

      - name: Run tests
        working-directory: src/email
        run: |
          if [ -d "test" ] || [ -d "spec" ]; then
            bundle exec rspec || bundle exec rake test
          else
            echo "No tests found, skipping"
          fi

  # Rust service
  rust-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.shipping == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Build
        working-directory: src/shipping
        run: cargo build --verbose

      - name: Lint with Clippy
        working-directory: src/shipping
        run: cargo clippy -- -D warnings

      - name: Format check
        working-directory: src/shipping
        run: cargo fmt --all -- --check

      - name: Run tests
        working-directory: src/shipping
        run: cargo test --verbose

  # C++ service
  cpp-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.currency == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Build
        working-directory: src/currency
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Lint with clang-format
        working-directory: src/currency
        run: |
          sudo apt-get install -y clang-format
          find src -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run -Werror

      - name: Run tests
        working-directory: src/currency/build
        run: |
          if [ -f "test_currency" ]; then
            ./test_currency
          else
            echo "No tests found, skipping"
          fi

  # Helm Chart Linting
  helm-lint:
    needs: detect-changes
    if: needs.detect-changes.outputs.helm-chart == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Lint Helm chart
        run: |
          helm lint helm-chart/otel-demo

      - name: Template Helm chart
        run: |
          helm template test-release helm-chart/otel-demo --debug

      - name: Validate with values-scout.yaml
        run: |
          helm template test-release helm-chart/otel-demo -f helm-chart/otel-demo/values-scout.yaml --debug

  # Summary job
  ci-summary:
    needs: [detect-changes, dotnet-services, java-services, go-services, nodejs-services, python-services, php-service, ruby-service, rust-service, cpp-service, helm-lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs status
        run: |
          echo "CI Summary:"
          echo "Changes detected: ${{ toJson(needs.detect-changes.outputs) }}"
          echo "All jobs completed"

          # Check if any job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Some jobs failed"
            exit 1
          else
            echo "✅ All jobs passed"
          fi
