{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.postgresql.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "otel-demo.componentLabels" (dict "root" . "component" "postgresql") | nindent 4 }}
spec:
  serviceName: {{ .Values.postgresql.name }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "otel-demo.componentSelectorLabels" (dict "root" . "component" "postgresql") | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "otel-demo.componentLabels" (dict "root" . "component" "postgresql") | nindent 8 }}
    spec:
      {{- include "otel-demo.imagePullSecrets" . | nindent 6 }}
      containers:
      - name: postgresql
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        imagePullPolicy: {{ .Values.demo.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.postgresql.port }}
          name: postgresql
        env:
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.auth.username }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgresql.auth.password }}
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.auth.database }}
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.auth.username }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.auth.username }}
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
      volumes:
      - name: init-scripts
        configMap:
          name: {{ .Values.postgresql.name }}-init
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.global.storageClass }}
      storageClassName: {{ .Values.global.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: 1Gi
{{- end }}
