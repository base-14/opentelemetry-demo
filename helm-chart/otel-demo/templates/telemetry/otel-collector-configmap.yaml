{{- if .Values.otelCollector.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.otelCollector.name }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "otel-demo.componentLabels" (dict "root" . "component" "otel-collector") | nindent 4 }}
data:
  config.yaml: |
    {{- if .Values.scout.enabled }}
    # Scout configuration
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      oauth2client:
        client_id: {{ .Values.scout.appName }}
        client_secret: {{ .Values.scout.apiKey }}
        endpoint_params:
          audience: {{ .Values.scout.audience }}
        token_url: {{ .Values.scout.tokenUrl }}
        tls:
          insecure_skip_verify: true

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:{{ .Values.otelCollector.ports.grpc }}
          http:
            endpoint: 0.0.0.0:{{ .Values.otelCollector.ports.http }}
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    processors:
      batch:
        timeout: 2s
        send_batch_size: 8192
        send_batch_max_size: 10000
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 30
      resource:
        attributes:
        - key: service.namespace
          value: opentelemetry-demo
          action: upsert
        - key: environment
          value: {{ .Values.scout.environment }}
          action: upsert
        - key: deployment.environment
          value: kubernetes
          action: insert
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time

    exporters:
      debug:
        verbosity: normal
      otlphttp/scout:
        endpoint: {{ .Values.scout.endpoint }}
        auth:
          authenticator: oauth2client
        tls:
          insecure_skip_verify: true

    service:
      extensions: [oauth2client, health_check]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, k8sattributes, resource]
          exporters: [otlphttp/scout, debug]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch, k8sattributes, resource]
          exporters: [otlphttp/scout, debug]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch, k8sattributes, resource]
          exporters: [otlphttp/scout, debug]
    {{- else }}
    # Default configuration (Jaeger, Prometheus, OpenSearch)
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:{{ .Values.otelCollector.ports.grpc }}
          http:
            endpoint: 0.0.0.0:{{ .Values.otelCollector.ports.http }}
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    processors:
      batch: {}
      resource:
        attributes:
        - key: service.instance.id
          from_attribute: k8s.pod.uid
          action: insert
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time

    exporters:
      debug:
        verbosity: detailed
      {{- if .Values.jaeger.enabled }}
      otlp/jaeger:
        endpoint: {{ .Values.jaeger.name }}:{{ .Values.jaeger.ports.collector }}
        tls:
          insecure: true
      {{- end }}
      {{- if .Values.prometheus.enabled }}
      prometheus:
        endpoint: 0.0.0.0:8889
        const_labels:
          deployment: opentelemetry-demo
      {{- end }}
      {{- if .Values.opensearch.enabled }}
      opensearch:
        endpoint: "http://{{ .Values.opensearch.name }}:{{ .Values.opensearch.port }}"
        logs_index: otel-logs
      {{- end }}

    connectors:
      spanmetrics:
        namespace: otel.demo

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch, k8sattributes, resource]
          exporters: [{{- if .Values.jaeger.enabled }}otlp/jaeger, {{- end }}debug, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [batch, k8sattributes, resource]
          exporters: [{{- if .Values.prometheus.enabled }}prometheus, {{- end }}debug]
        logs:
          receivers: [otlp]
          processors: [batch, k8sattributes, resource]
          exporters: [{{- if .Values.opensearch.enabled }}opensearch, {{- end }}debug]
    {{- end }}
{{- end }}
